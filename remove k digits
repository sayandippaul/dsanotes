# **📌 Remove K Digits – Notes**  

The problem requires us to **remove `k` digits** from a given number (as a string) to make it the **smallest possible number**.

---

## **🔹 Approach**
✅ **Use a Monotonic Increasing Stack** to maintain the smallest possible number.  
✅ **Traverse through each digit and push it into the stack**:  
   - If the **stack top is greater** than the current digit, **pop** (remove larger digits first).  
   - Continue this until we have removed `k` digits.  
✅ **After the loop, remove extra digits from the end if `k > 0`**.  
✅ **Remove leading zeros**.  
✅ **If the resulting number is empty, return `"0"`**.  

---

## **🔹 Code Explanation**
```cpp
class Solution {
public:
    string removeKdigits(string arr, int k) {
        stack<char> st;
        int n = arr.size();

        // Step 1: Use stack to remove k digits greedily
        for (int i = 0; i < n; i++) {
            while (!st.empty() && st.top() > arr[i] && k > 0) {
                st.pop();
                k--;
            }
            st.push(arr[i]);
        }

        // Step 2: Remove any remaining k digits
        while (k > 0 && !st.empty()) {
            st.pop();
            k--;
        }

        // Step 3: Convert stack to string
        string ans = "";
        while (!st.empty()) {
            ans.push_back(st.top());
            st.pop();
        }

        // Step 4: Remove leading zeros
        while (!ans.empty() && ans.back() == '0') {
            ans.pop_back();
        }

        // Step 5: Reverse to get the correct order
        reverse(ans.begin(), ans.end());

        // If empty string remains, return "0"
        return ans.empty() ? "0" : ans;
    }
};
```

---

## **🔹 Key Observations**
💡 **Always remove larger digits first** to get the smallest number.  
💡 **A stack helps maintain increasing order efficiently**.  
💡 **Removing leading zeros ensures correct numerical representation**.  

---

## **🔹 Complexity Analysis**
| Operation | Time Complexity | Space Complexity |
|-----------|---------------|----------------|
| Traversing string | **O(N)** | **O(N)** (Stack) |
| Removing k digits | **O(K)** | **O(1)** |
| Constructing result | **O(N)** | **O(N)** |

⏳ **Total Complexity: O(N)** ✅

---

## **🔹 Example Walkthrough**
### **Example 1**
#### **Input:**  
```cpp
arr = "1432219", k = 3
```
#### **Step-by-Step Execution:**
1. **Process each digit using the stack:**
   ```
   1 -> [1]
   4 -> [1, 4]
   3 -> [1, 3]  (4 is removed because 4 > 3 and k > 0)
   2 -> [1, 2]  (3 is removed because 3 > 2 and k > 0)
   2 -> [1, 2, 2]
   1 -> [1, 2, 1] (2 is removed because 2 > 1 and k > 0)
   9 -> [1, 2, 1, 9]
   ```
2. **Resulting Stack**: `[1, 2, 1, 9]`  
3. **Final Output:** `"1219"`

#### **Output:** `"1219"`

---

### **Example 2**
#### **Input:**  
```cpp
arr = "10200", k = 1
```
#### **Execution:**  
1. Remove **1** → `"0200"`
2. Remove leading zeros → `"200"`

#### **Output:** `"200"`

---

## **🔹 Key Takeaways**
✅ **Stack helps remove unnecessary digits efficiently**.  
✅ **Always remove larger digits first to make the number smaller**.  
✅ **Remove leading zeros after constructing the final result**.  

🚀 **This technique is useful in greedy problems & monotonic stack problems!** Let me know if you need more clarifications. 😊
