# **ðŸ“Œ Stock Span Problem â€“ Full Notes**  

The **Stock Span Problem** asks us to determine how many consecutive **days before today** had a **lower or equal** stock price.  

---

## **ðŸ”¹ Problem Statement**  
Given an array `arr[]` representing stock prices on `n` consecutive days, the **stock span** for each day is **the number of consecutive days before it (including itself) where the stock price was less than or equal to todayâ€™s price**.  

ðŸ’¡ **For each `i`, find the maximum `j` such that `arr[j] â‰¤ arr[i]` for all `j` from `i` back to 0.**  

---

## **ðŸ”¹ Approach: Using Stack (Optimal)**
### **ðŸ›  Idea**
We use a **monotonic decreasing stack** that stores **indices**.  
- If the stack is **empty**, it means **all previous elements were smaller**, so the span is `(i+1)`.  
- If the top of the stack has a **greater value**, the span is `i - st.top()`.  
- **Pop** smaller values because they donâ€™t contribute to the span anymore.

---

### **ðŸš€ Steps**
1. **Use a stack to store indices of previous stock prices**.
2. **Iterate over each stock price**:
   - Remove elements from the stack **while `arr[st.top()] â‰¤ arr[i]`**.
   - If the stack is **empty**, span = `i+1` (all previous values were smaller).
   - Else, span = `i - st.top()` (distance to the nearest greater element).
   - Push the current index onto the stack.
3. **Store the result for each day**.

---

## **ðŸ”¹ Code: Using Stack**
```cpp
class Solution {
public:
    vector<int> stockSpan(vector<int>& arr) {
        int n = arr.size();
        vector<int> span(n);
        stack<int> st;

        for (int i = 0; i < n; i++) {
            // Remove elements smaller or equal to current price
            while (!st.empty() && arr[st.top()] <= arr[i]) {
                st.pop();
            }
            // If stack is empty, all previous elements were smaller
            span[i] = (st.empty()) ? (i + 1) : (i - st.top());
            
            // Push current index to stack
            st.push(i);
        }
        return span;
    }
};
```

---

## **ðŸ”¹ Complexity Analysis**
| **Approach** | **Time Complexity** | **Space Complexity** |
|-------------|-----------------|----------------|
| **Brute Force (Nested Loops)** | O(NÂ²) | O(1) |
| **Stack (Optimal Approach)** | O(N) | O(N) |

ðŸ”¹ **Each element is pushed and popped from the stack at most once** â†’ **O(N)**.  
ðŸ”¹ **Space complexity is O(N)** for the stack.

---

## **ðŸ”¹ Example Walkthrough**
### **Example 1**
#### **Input:**
```cpp
arr = {100, 80, 60, 70, 60, 75, 85}
```
#### **Processing Steps**
| Index | Price | Stack (Indices) | Span |
|--------|-------|----------------|------|
| 0 | 100 | `[0]` | `1` |
| 1 | 80  | `[0, 1]` | `1` |
| 2 | 60  | `[0, 1, 2]` | `1` |
| 3 | 70  | `[0, 1, 3]` | `2` |
| 4 | 60  | `[0, 1, 3, 4]` | `1` |
| 5 | 75  | `[0, 1, 5]` | `4` |
| 6 | 85  | `[0, 6]` | `6` |

#### **Output:**
```cpp
[1, 1, 1, 2, 1, 4, 6]
```

---

## **ðŸ”¹ Key Takeaways**
âœ… **Stack helps efficiently track the nearest greater element in O(N)**.  
âœ… **Remove smaller elements from the stack** as they donâ€™t contribute to the span.  
âœ… **Works well for real-time stock data processing**. ðŸš€
