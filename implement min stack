Min Stack Implementation in C++
A Min Stack is a special stack that supports the following operations in O(1) time complexity:

push(x) â€“ Push element x onto the stack.

pop() â€“ Remove the top element from the stack.

top() â€“ Get the top element.

getMin() â€“ Retrieve the minimum element in the stack.

Code Explanation
cpp
Copy
Edit
class MinStack {
public:
    stack<pair<int, int>> st;  // Stack stores (value, min_value)

    MinStack() {}

    void push(int v) {
        if (st.empty()) 
            st.push({v, v});  // If empty, min is the element itself
        else {
            int currentMin = min(v, st.top().second); // Compare with current min
            st.push({v, currentMin});
        }
    }

    void pop() {
        if (!st.empty()) 
            st.pop();
    }

    int top() {
        return st.top().first;  // Return the top element
    }

    int getMin() {
        return st.top().second;  // Return the minimum element
    }
};
Key Points & Approach
âœ… Use a Stack of Pairs

Each element stores (value, min_value_so_far).

This allows getMin() in O(1) time.

âœ… Push Operation

If the stack is empty, push {value, value}.

Otherwise, store {value, min(value, current_min)}.

âœ… Pop Operation

Simply remove the top element.

âœ… Top Operation

Return st.top().first.

âœ… getMin() Operation

Return st.top().second, which stores the minimum so far.

Time Complexity
Push: O(1)

Pop: O(1)

Top: O(1)

getMin: O(1)

Memory Trick to Remember Approach
ðŸ”¹ Think of an Extra Min Tracker
Each time you push, store the minimum so far, so you never have to traverse the stack.










### **Min Stack Using a Single Stack and a Variable (`mini`)**  

This implementation optimizes space by using a **single stack** (`st`) and a **global variable** (`mini`) to store the minimum element efficiently. Instead of using an auxiliary stack, we **encode the minimum element in the stack itself**.

---

## **How This Works?**
### **Push Operation**
1. **If the stack is empty:**  
   - Push `val` directly.  
   - Set `mini = val`.  
2. **If `val` is greater than `mini`:**  
   - Push `val` normally.  
3. **If `val` is smaller than `mini`:**  
   - Push **a special encoded value**: `2 * val - mini`.  
   - Update `mini = val`.  
   - This ensures we can recover the previous `mini` when popping.

### **Pop Operation**
1. **If `st.top() > mini`** â†’ Normal pop.  
2. **If `st.top() <= mini`**:  
   - The top is the **encoded value**.  
   - Restore `mini` using: `mini = 2 * mini - st.top()`.  
   - Then pop the stack.

### **Top Operation**
1. **If `st.top() > mini`** â†’ Return `st.top()`.  
2. **Else, return `mini`** (since `mini` holds the actual top value for encoded elements).

### **Get Min Operation**
- Simply return `mini`, which always stores the current minimum.

---

## **Optimized Code**
```cpp
class MinStack {
public:
    stack<long long> st;  // Using long long to prevent overflow issues
    long long mini = 1e9; // Stores the minimum element

    MinStack() {}

    void push(int val) {
        if (st.empty()) {
            st.push(val);
            mini = val;
        } else {
            if (val > mini) {
                st.push(val); // Push normally if val > mini
            } else {
                st.push(2 * val - mini); // Encode the old min value
                mini = val; // Update mini to new min
            }
        }
    }

    void pop() {
        if (st.top() > mini) {
            st.pop(); // Normal pop if top is not encoded
        } else {
            mini = 2 * mini - st.top(); // Restore previous mini
            st.pop();
        }
    }

    int top() {
        if (st.top() > mini) 
            return st.top();
        return mini; // If encoded, return mini
    }

    int getMin() {
        return mini;
    }
};
```

---

## **Key Points & Memory Trick**
âœ… **Single Stack Approach** â†’ Uses **encoding trick** instead of an extra stack.  
âœ… **Encoding Formula**:  
   - `2 * val - mini` (used to encode `mini` into the stack).  
   - `mini = 2 * mini - st.top()` (used to recover the old `mini`).  
âœ… **Constant Time (`O(1)`) Operations** â†’ Push, Pop, Top, and getMin all run in `O(1)`.  
âœ… **Space Optimized** â†’ Uses only one stack.

---

## **Why This Works?**
The trick behind `2 * val - mini` ensures that we can always **recover the previous minimum** when popping, without storing extra elements.

---

ðŸš€ **This is the most optimized space-efficient solution for Min Stack!** Let me know if you need more explanation.
